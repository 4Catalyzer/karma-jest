diff --git a/node_modules/browser-jest-message-util/build/index.js b/node_modules/browser-jest-message-util/build/index.js
index 4d12a76..ebda3e2 100644
--- a/node_modules/browser-jest-message-util/build/index.js
+++ b/node_modules/browser-jest-message-util/build/index.js
@@ -7,8 +7,6 @@ exports.separateMessageFromStack = exports.formatResultsErrors = exports.formatS
 
 var path = _interopRequireWildcard(require('path'));
 
-var fs = _interopRequireWildcard(require('graceful-fs'));
-
 var _chalk = _interopRequireDefault(require('chalk'));
 
 var _micromatch = _interopRequireDefault(require('micromatch'));
@@ -68,7 +66,7 @@ function _interopRequireWildcard(obj) {
 var Symbol = global['jest-symbol-do-not-touch'] || global.Symbol;
 var Symbol = global['jest-symbol-do-not-touch'] || global.Symbol;
 var jestReadFile =
-  global[Symbol.for('jest-native-read-file')] || fs.readFileSync;
+  global[Symbol.for('jest-native-read-file')];
 // stack utils tries to create pretty stack by making paths relative.
 const stackUtils = new _stackUtils.default({
   cwd: 'something which does not exist'
@@ -114,24 +112,6 @@ const trim = string => (string || '').trim(); // Some errors contain not only li
 const trimPaths = string =>
   string.match(STACK_PATH_REGEXP) ? trim(string) : string;
 
-const getRenderedCallsite = (fileContent, line, column) => {
-  let renderedCallsite = (0, _codeFrame.codeFrameColumns)(
-    fileContent,
-    {
-      start: {
-        column,
-        line
-      }
-    },
-    {
-      highlightCode: true
-    }
-  );
-  renderedCallsite = indentAllLines(renderedCallsite, MESSAGE_INDENT);
-  renderedCallsite = `\n${renderedCallsite}\n`;
-  return renderedCallsite;
-};
-
 const blankStringRegexp = /^\s*$/;
 
 function checkForCommonEnvironmentErrors(error) {
@@ -314,27 +294,6 @@ const formatStackTrace = (stack, config, options, testPath) => {
     ? (0, _slash.default)(path.relative(config.rootDir, testPath))
     : null;
 
-  if (!options.noStackTrace && !options.noCodeFrame) {
-    const topFrame = getTopFrame(lines);
-
-    if (topFrame) {
-      const {column, file: filename, line} = topFrame;
-
-      if (line && filename && path.isAbsolute(filename)) {
-        let fileContent;
-
-        try {
-          // TODO: check & read HasteFS instead of reading the filesystem:
-          // see: https://github.com/facebook/jest/pull/5405#discussion_r164281696
-          fileContent = jestReadFile(filename, 'utf8');
-          renderedCallsite = getRenderedCallsite(fileContent, line, column);
-        } catch {
-          // the file does not exist or is inaccessible, we ignore
-        }
-      }
-    }
-  }
-
   const stacktrace = lines
     .filter(Boolean)
     .map(
@@ -349,46 +308,6 @@ const formatStackTrace = (stack, config, options, testPath) => {
 
 exports.formatStackTrace = formatStackTrace;
 
-const formatResultsErrors = (testResults, config, options, testPath) => {
-  const failedResults = testResults.reduce((errors, result) => {
-    result.failureMessages
-      .map(checkForCommonEnvironmentErrors)
-      .forEach(content =>
-        errors.push({
-          content,
-          result
-        })
-      );
-    return errors;
-  }, []);
-
-  if (!failedResults.length) {
-    return null;
-  }
-
-  return failedResults
-    .map(({result, content}) => {
-      let {message, stack} = separateMessageFromStack(content);
-      stack = options.noStackTrace
-        ? ''
-        : STACK_TRACE_COLOR(
-            formatStackTrace(stack, config, options, testPath)
-          ) + '\n';
-      message = indentAllLines(message, MESSAGE_INDENT);
-      const title =
-        _chalk.default.bold.red(
-          TITLE_INDENT +
-            TITLE_BULLET +
-            result.ancestorTitles.join(ANCESTRY_SEPARATOR) +
-            (result.ancestorTitles.length ? ANCESTRY_SEPARATOR : '') +
-            result.title
-        ) + '\n';
-      return title + '\n' + message + '\n' + stack;
-    })
-    .join('\n');
-};
-
-exports.formatResultsErrors = formatResultsErrors;
 const errorRegexp = /^Error:?\s*$/;
 
 const removeBlankErrorLine = str =>
