diff --git a/node_modules/browser-jest-snapshot/build/printSnapshot.js b/node_modules/browser-jest-snapshot/build/printSnapshot.js
index c85c3c4..747f041 100644
--- a/node_modules/browser-jest-snapshot/build/printSnapshot.js
+++ b/node_modules/browser-jest-snapshot/build/printSnapshot.js
@@ -37,57 +37,13 @@ function _interopRequireDefault(obj) {
 // is not in the public interface of the expect package,
 // and the long-term goal is to use a non-serialization diff.
 const getSnapshotColorForChalkInstance = chalkInstance => {
-  const level = chalkInstance.level;
-
-  if (level === 3) {
-    return chalkInstance
-      .rgb(
-        _colors.aForeground3[0],
-        _colors.aForeground3[1],
-        _colors.aForeground3[2]
-      )
-      .bgRgb(
-        _colors.aBackground3[0],
-        _colors.aBackground3[1],
-        _colors.aBackground3[2]
-      );
-  }
-
-  if (level === 2) {
-    return chalkInstance
-      .ansi256(_colors.aForeground2)
-      .bgAnsi256(_colors.aBackground2);
-  }
-
-  return chalkInstance.magenta.bgYellowBright;
+  return (input) => `\u001b[38;5;127m\u001b[48;5;225m${chalkInstance.unstyle(input)}\u001b[49m\u001b[39m`
 };
 
 exports.getSnapshotColorForChalkInstance = getSnapshotColorForChalkInstance;
 
 const getReceivedColorForChalkInstance = chalkInstance => {
-  const level = chalkInstance.level;
-
-  if (level === 3) {
-    return chalkInstance
-      .rgb(
-        _colors.bForeground3[0],
-        _colors.bForeground3[1],
-        _colors.bForeground3[2]
-      )
-      .bgRgb(
-        _colors.bBackground3[0],
-        _colors.bBackground3[1],
-        _colors.bBackground3[2]
-      );
-  }
-
-  if (level === 2) {
-    return chalkInstance
-      .ansi256(_colors.bForeground2)
-      .bgAnsi256(_colors.bBackground2);
-  }
-
-  return chalkInstance.cyan.bgWhiteBright; // also known as teal
+  return (input) => `\u001b[38;5;30m\u001b[48;5;195m${chalkInstance.unstyle(input)}\u001b[49m\u001b[39m`
 };
 
 exports.getReceivedColorForChalkInstance = getReceivedColorForChalkInstance;
diff --git a/node_modules/browser-jest-snapshot/build/utils.js b/node_modules/browser-jest-snapshot/build/utils.js
index fc49330..404c4d0 100644
--- a/node_modules/browser-jest-snapshot/build/utils.js
+++ b/node_modules/browser-jest-snapshot/build/utils.js
@@ -7,14 +7,6 @@ exports.deepMerge = exports.saveSnapshotFile = exports.ensureDirectoryExists = e
 
 var path = _interopRequireWildcard(require('path'));
 
-var fs = _interopRequireWildcard(require('graceful-fs'));
-
-var _makeDir = _interopRequireDefault(require('make-dir'));
-
-var _naturalCompare = _interopRequireDefault(require('natural-compare'));
-
-var _chalk = _interopRequireDefault(require('chalk'));
-
 var _prettyFormat = _interopRequireDefault(require('pretty-format'));
 
 var _plugins = require('./plugins');
@@ -68,134 +60,13 @@ function _interopRequireWildcard(obj) {
 var Symbol = global['jest-symbol-do-not-touch'] || global.Symbol;
 var Symbol = global['jest-symbol-do-not-touch'] || global.Symbol;
 var jestWriteFile =
-  global[Symbol.for('jest-native-write-file')] || fs.writeFileSync;
+  global[Symbol.for('jest-native-write-file')] || (() => {});
 var Symbol = global['jest-symbol-do-not-touch'] || global.Symbol;
 var jestReadFile =
-  global[Symbol.for('jest-native-read-file')] || fs.readFileSync;
+  global[Symbol.for('jest-native-read-file')] || (() => {});
 var Symbol = global['jest-symbol-do-not-touch'] || global.Symbol;
 var jestExistsFile =
-  global[Symbol.for('jest-native-exists-file')] || fs.existsSync;
-const SNAPSHOT_VERSION = '1';
-exports.SNAPSHOT_VERSION = SNAPSHOT_VERSION;
-const SNAPSHOT_VERSION_REGEXP = /^\/\/ Jest Snapshot v(.+),/;
-const SNAPSHOT_GUIDE_LINK = 'https://goo.gl/fbAQLP';
-exports.SNAPSHOT_GUIDE_LINK = SNAPSHOT_GUIDE_LINK;
-
-const SNAPSHOT_VERSION_WARNING = _chalk.default.yellow(
-  `${_chalk.default.bold('Warning')}: Before you upgrade snapshots, ` +
-    `we recommend that you revert any local changes to tests or other code, ` +
-    `to ensure that you do not store invalid state.`
-);
-
-exports.SNAPSHOT_VERSION_WARNING = SNAPSHOT_VERSION_WARNING;
-
-const writeSnapshotVersion = () =>
-  `// Jest Snapshot v${SNAPSHOT_VERSION}, ${SNAPSHOT_GUIDE_LINK}`;
-
-const validateSnapshotVersion = snapshotContents => {
-  const versionTest = SNAPSHOT_VERSION_REGEXP.exec(snapshotContents);
-  const version = versionTest && versionTest[1];
-
-  if (!version) {
-    return new Error(
-      _chalk.default.red(
-        `${_chalk.default.bold(
-          'Outdated snapshot'
-        )}: No snapshot header found. ` +
-          `Jest 19 introduced versioned snapshots to ensure all developers ` +
-          `on a project are using the same version of Jest. ` +
-          `Please update all snapshots during this upgrade of Jest.\n\n`
-      ) + SNAPSHOT_VERSION_WARNING
-    );
-  }
-
-  if (version < SNAPSHOT_VERSION) {
-    return new Error(
-      _chalk.default.red(
-        `${_chalk.default.red.bold(
-          'Outdated snapshot'
-        )}: The version of the snapshot ` +
-          `file associated with this test is outdated. The snapshot file ` +
-          `version ensures that all developers on a project are using ` +
-          `the same version of Jest. ` +
-          `Please update all snapshots during this upgrade of Jest.\n\n`
-      ) +
-        `Expected: v${SNAPSHOT_VERSION}\n` +
-        `Received: v${version}\n\n` +
-        SNAPSHOT_VERSION_WARNING
-    );
-  }
-
-  if (version > SNAPSHOT_VERSION) {
-    return new Error(
-      _chalk.default.red(
-        `${_chalk.default.red.bold(
-          'Outdated Jest version'
-        )}: The version of this ` +
-          `snapshot file indicates that this project is meant to be used ` +
-          `with a newer version of Jest. The snapshot file version ensures ` +
-          `that all developers on a project are using the same version of ` +
-          `Jest. Please update your version of Jest and re-run the tests.\n\n`
-      ) +
-        `Expected: v${SNAPSHOT_VERSION}\n` +
-        `Received: v${version}`
-    );
-  }
-
-  return null;
-};
-
-function isObject(item) {
-  return item && typeof item === 'object' && !Array.isArray(item);
-}
-
-const testNameToKey = (testName, count) => testName + ' ' + count;
-
-exports.testNameToKey = testNameToKey;
-
-const keyToTestName = key => {
-  if (!/ \d+$/.test(key)) {
-    throw new Error('Snapshot keys must end with a number.');
-  }
-
-  return key.replace(/ \d+$/, '');
-};
-
-exports.keyToTestName = keyToTestName;
-
-const getSnapshotData = (snapshotPath, update) => {
-  const data = Object.create(null);
-  let snapshotContents = '';
-  let dirty = false;
-
-  if (jestExistsFile(snapshotPath)) {
-    try {
-      snapshotContents = jestReadFile(snapshotPath, 'utf8'); // eslint-disable-next-line no-new-func
-
-      const populate = new Function('exports', snapshotContents);
-      populate(data);
-    } catch (e) {}
-  }
-
-  const validationResult = validateSnapshotVersion(snapshotContents);
-  const isInvalid = snapshotContents && validationResult;
-
-  if (update === 'none' && isInvalid) {
-    throw validationResult;
-  }
-
-  if ((update === 'all' || update === 'new') && isInvalid) {
-    dirty = true;
-  }
-
-  return {
-    data,
-    dirty
-  };
-}; // Add extra line breaks at beginning and end of multiline snapshot
-// to make the content easier to read.
-
-exports.getSnapshotData = getSnapshotData;
+  global[Symbol.for('jest-native-exists-file')] || (() => {});
 
 const addExtraLineBreaks = string =>
   string.includes('\n') ? `\n${string}\n` : string; // Remove extra line breaks at beginning and end of multiline snapshot.
@@ -259,78 +130,3 @@ exports.deserializeString = deserializeString;
 const escapeBacktickString = str => str.replace(/`|\\|\${/g, '\\$&');
 
 exports.escapeBacktickString = escapeBacktickString;
-
-const printBacktickString = str => '`' + escapeBacktickString(str) + '`';
-
-const ensureDirectoryExists = filePath => {
-  try {
-    _makeDir.default.sync(path.join(path.dirname(filePath)));
-  } catch (e) {}
-};
-
-exports.ensureDirectoryExists = ensureDirectoryExists;
-
-const normalizeNewlines = string => string.replace(/\r\n|\r/g, '\n');
-
-const saveSnapshotFile = (snapshotData, snapshotPath) => {
-  const snapshots = Object.keys(snapshotData)
-    .sort(_naturalCompare.default)
-    .map(
-      key =>
-        'exports[' +
-        printBacktickString(key) +
-        '] = ' +
-        printBacktickString(normalizeNewlines(snapshotData[key])) +
-        ';'
-    );
-  ensureDirectoryExists(snapshotPath);
-  jestWriteFile(
-    snapshotPath,
-    writeSnapshotVersion() + '\n\n' + snapshots.join('\n\n') + '\n'
-  );
-};
-
-exports.saveSnapshotFile = saveSnapshotFile;
-
-const deepMergeArray = (target, source) => {
-  const mergedOutput = Array.from(target);
-  source.forEach((sourceElement, index) => {
-    const targetElement = mergedOutput[index];
-
-    if (Array.isArray(target[index])) {
-      mergedOutput[index] = deepMergeArray(target[index], sourceElement);
-    } else if (isObject(targetElement)) {
-      mergedOutput[index] = deepMerge(target[index], sourceElement);
-    } else {
-      // Source does not exist in target or target is primitive and cannot be deep merged
-      mergedOutput[index] = sourceElement;
-    }
-  });
-  return mergedOutput;
-}; // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types
-
-const deepMerge = (target, source) => {
-  const mergedOutput = {...target};
-
-  if (isObject(target) && isObject(source)) {
-    Object.keys(source).forEach(key => {
-      if (isObject(source[key]) && !source[key].$$typeof) {
-        if (!(key in target))
-          Object.assign(mergedOutput, {
-            [key]: source[key]
-          });
-        else mergedOutput[key] = deepMerge(target[key], source[key]);
-      } else if (Array.isArray(source[key])) {
-        mergedOutput[key] = deepMergeArray(target[key], source[key]);
-      } else {
-        Object.assign(mergedOutput, {
-          [key]: source[key]
-        });
-      }
-    });
-  }
-
-  return mergedOutput;
-};
-
-exports.deepMerge = deepMerge;
